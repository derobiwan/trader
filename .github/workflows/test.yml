name: Test Suite

on:
  pull_request:
    branches:
      - main
      - 'sprint-*'
  push:
    branches:
      - main
      - 'sprint-*'

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy pylint

      - name: Run black
        run: black --check workspace/

      - name: Run isort
        run: isort --check-only workspace/

      # Flake8 disabled - line length checks can be too strict for some cases
      # - name: Run flake8
      #   run: flake8 workspace/ --max-line-length=120 --extend-ignore=E203,W503

      - name: Run mypy
        run: mypy workspace/ --ignore-missing-imports
        continue-on-error: true

      - name: Run pylint
        run: pylint workspace/ --max-line-length=120
        continue-on-error: true

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: timescale/timescaledb:2.13.0-pg15
        env:
          POSTGRES_DB: trading_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout pytest-xdist
          pip install -e .

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
        run: |
          python workspace/shared/database/migrations/migration_runner.py

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest workspace/tests/unit/ -v -n auto --cov=workspace --cov-report=xml --cov-report=term --junitxml=test-results.xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: timescale/timescaledb:2.13.0-pg15
        env:
          POSTGRES_DB: trading_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout
          pip install -e .

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
        run: |
          python workspace/shared/database/migrations/migration_runner.py

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest workspace/tests/integration/ -v --cov=workspace --cov-report=xml --junitxml=test-results-integration.xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integration

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: timescale/timescaledb:2.13.0-pg15
        env:
          POSTGRES_DB: trading_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-benchmark
          pip install -e .

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
        run: |
          python workspace/shared/database/migrations/migration_runner.py

      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest workspace/tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json

  test-summary:
    name: Test Summary
    needs: [lint, test-unit, test-integration]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [ "${{ needs.test-unit.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          if [ "${{ needs.test-integration.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          echo "✅ All tests passed!"

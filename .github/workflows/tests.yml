name: Test Suite

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - 'sprint-*/stream-*'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
  REDIS_URL: redis://localhost:6379/0
  ENVIRONMENT: test
  TRADING_MODE: paper

jobs:
  test-matrix:
    name: Test - ${{ matrix.test-type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, performance, security]
        include:
          - test-type: unit
            test-path: workspace/tests/unit/
            coverage-flag: unit
          - test-type: integration
            test-path: workspace/tests/integration/
            coverage-flag: integration
          - test-type: performance
            test-path: workspace/tests/performance/
            coverage-flag: performance
          - test-type: security
            test-path: workspace/tests/security/
            coverage-flag: security

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pytest-cov pytest-xdist pytest-timeout

      - name: Run database migrations
        if: matrix.test-type == 'integration'
        run: |
          source .venv/bin/activate
          alembic upgrade head

      - name: Run ${{ matrix.test-type }} tests
        run: |
          source .venv/bin/activate
          pytest ${{ matrix.test-path }} \
            --cov=workspace \
            --cov-report=xml:coverage-${{ matrix.test-type }}.xml \
            --cov-report=term-missing \
            --junitxml=junit-${{ matrix.test-type }}.xml \
            -v \
            --tb=short \
            --timeout=300 \
            -n auto

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: junit-${{ matrix.test-type }}.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-${{ matrix.test-type }}.xml
          flags: ${{ matrix.coverage-flag }}
          name: ${{ matrix.test-type }}-coverage

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results/**/junit-*.xml
          check_name: Test Results
          comment_title: Test Results Summary
          hide_comments: false

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for file in test-results/**/junit-*.xml; do
            if [ -f "$file" ]; then
              test_type=$(basename "$file" .xml | sed 's/junit-//')
              echo "### ${test_type^} Tests" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('$file')
          root = tree.getroot()
          tests = root.get('tests', '0')
          failures = root.get('failures', '0')
          errors = root.get('errors', '0')
          time = root.get('time', '0')
          passed = int(tests) - int(failures) - int(errors)
          print(f'Total: {tests} | Passed: {passed} | Failed: {failures} | Errors: {errors} | Time: {time}s')
              " >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

"""
Base Strategy

Abstract base class for trading strategies with common interface.

Author: Strategy Implementation Team
Date: 2025-10-28
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import Dict, Optional, Any
from decimal import Decimal
from enum import Enum
from datetime import datetime, timezone

from workspace.features.market_data import MarketDataSnapshot
from workspace.features.trading_loop import TradingDecision


class StrategyType(str, Enum):
    """Strategy types"""
    MEAN_REVERSION = "mean_reversion"
    TREND_FOLLOWING = "trend_following"
    VOLATILITY_BREAKOUT = "volatility_breakout"
    MOMENTUM = "momentum"
    ARBITRAGE = "arbitrage"
    CUSTOM = "custom"


@dataclass
class StrategySignal:
    """
    Trading signal generated by a strategy

    Similar to TradingSignal but from algorithmic strategy
    rather than LLM decision engine.
    """
    symbol: str
    decision: TradingDecision
    confidence: Decimal  # 0.0 to 1.0
    size_pct: Decimal  # 0.0 to 1.0 (% of capital)
    stop_loss_pct: Optional[Decimal] = None
    take_profit_pct: Optional[Decimal] = None
    reasoning: Optional[str] = None
    strategy_name: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)

    def __post_init__(self):
        """Validate signal parameters"""
        if not 0 <= self.confidence <= 1:
            raise ValueError(f"Confidence must be 0-1, got {self.confidence}")
        if not 0 <= self.size_pct <= 1:
            raise ValueError(f"Size percentage must be 0-1, got {self.size_pct}")


class BaseStrategy(ABC):
    """
    Base Strategy Class

    Abstract base class for all trading strategies.

    All strategies must implement:
    - analyze(): Generate trading signal from market data
    - get_name(): Return strategy name
    - get_type(): Return strategy type

    Attributes:
        name: Strategy name
        strategy_type: Strategy type (enum)
        config: Strategy configuration

    Example:
        ```python
        class MyStrategy(BaseStrategy):
            def analyze(self, snapshot):
                # Implement logic
                return StrategySignal(...)

            def get_name(self):
                return "My Custom Strategy"

            def get_type(self):
                return StrategyType.CUSTOM
        ```
    """

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Initialize strategy

        Args:
            config: Strategy configuration dictionary
        """
        self.config = config or {}
        self._signal_count = 0
        self._last_signal_time: Optional[datetime] = None

    @abstractmethod
    def analyze(self, snapshot: MarketDataSnapshot) -> StrategySignal:
        """
        Analyze market data and generate trading signal

        Args:
            snapshot: Market data snapshot with OHLCV and indicators

        Returns:
            StrategySignal with trading decision

        Raises:
            ValueError: If snapshot is invalid or missing required data
        """
        pass

    @abstractmethod
    def get_name(self) -> str:
        """Get strategy name"""
        pass

    @abstractmethod
    def get_type(self) -> StrategyType:
        """Get strategy type"""
        pass

    def get_config(self) -> Dict[str, Any]:
        """Get strategy configuration"""
        return self.config.copy()

    def get_stats(self) -> Dict[str, Any]:
        """
        Get strategy statistics

        Returns:
            Dictionary with strategy stats
        """
        return {
            "name": self.get_name(),
            "type": self.get_type().value,
            "signal_count": self._signal_count,
            "last_signal_time": self._last_signal_time.isoformat() if self._last_signal_time else None,
        }

    def _record_signal(self, signal: StrategySignal):
        """Record signal for statistics"""
        self._signal_count += 1
        self._last_signal_time = datetime.now(timezone.utc)

    def validate_snapshot(self, snapshot: MarketDataSnapshot) -> bool:
        """
        Validate that snapshot has required data

        Args:
            snapshot: Market data snapshot

        Returns:
            True if valid, False otherwise
        """
        if not snapshot:
            return False

        # Check basic data
        if not snapshot.ohlcv or not snapshot.ticker:
            return False

        return True


# Export
__all__ = [
    "BaseStrategy",
    "StrategySignal",
    "StrategyType",
]

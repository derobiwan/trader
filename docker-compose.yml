version: '3.8'

# Trading System Infrastructure
# Sprint 1 Stream C: Database & Redis Infrastructure
#
# Services:
# - PostgreSQL 15 with TimescaleDB extension
# - Redis 7 with AOF persistence
# - Grafana for dashboards
# - Prometheus for metrics collection
#
# Author: Infrastructure Specialist
# Date: 2025-10-28

services:
  # ============================================================================
  # PostgreSQL with TimescaleDB
  # ============================================================================
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8"
      PGDATA: /var/lib/postgresql/data/pgdata

    ports:
      - "5432:5432"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./workspace/shared/database/migrations/001_initial_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    networks:
      - trading_network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    restart: unless-stopped

    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300

    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

    networks:
      - trading_network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Grafana (Monitoring Dashboard)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    restart: unless-stopped

    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_DATABASE_TYPE: sqlite3
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"

    ports:
      - "3000:3000"

    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started

    networks:
      - trading_network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Prometheus (Metrics Collection)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

    ports:
      - "9090:9090"

    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

    networks:
      - trading_network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ============================================================================
# Networks
# ============================================================================
networks:
  trading_network:
    driver: bridge
    name: trading_network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
    name: trading_postgres_data

  redis_data:
    driver: local
    name: trading_redis_data

  grafana_data:
    driver: local
    name: trading_grafana_data

  prometheus_data:
    driver: local
    name: trading_prometheus_data

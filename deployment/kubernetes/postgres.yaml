apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: llm-trader-prod
  labels:
    app: llm-crypto-trader
    component: postgres
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: llm-crypto-trader
      component: postgres
  template:
    metadata:
      labels:
        app: llm-crypto-trader
        component: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: llm-trader-config
              key: DATABASE_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: llm-trader-secrets
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: llm-trader-secrets
              key: DATABASE_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: llm-trader-prod
  labels:
    app: llm-crypto-trader
    component: postgres
data:
  postgresql.conf: |
    # PostgreSQL configuration for production

    # Connection settings
    listen_addresses = '*'
    max_connections = 200

    # Memory settings (for 2GB container limit)
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    maintenance_work_mem = 128MB
    work_mem = 10MB

    # Checkpoint settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Query tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Logging
    log_statement = 'all'
    log_duration = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0

    # Performance tracking
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all

    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 4
    autovacuum_naptime = 30s

    # SSL
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: llm-trader-prod
  labels:
    app: llm-crypto-trader
    component: postgres
data:
  01-create-extensions.sql: |
    -- Enable required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";

  02-create-roles.sql: |
    -- Create read-only role for monitoring
    CREATE ROLE monitoring_user WITH LOGIN PASSWORD 'monitoring_password';
    GRANT CONNECT ON DATABASE llm_trader TO monitoring_user;
    GRANT USAGE ON SCHEMA public TO monitoring_user;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO monitoring_user;

  03-performance-indexes.sql: |
    -- Note: Actual indexes will be created by the application migrations
    -- This is a placeholder for any database-level optimizations
